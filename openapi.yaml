openapi: 1.0.0
info:
  title: Task iWine HTTP API
  contact:
    name: Aleksandr Chistiakov
    email: alex@smithart.ru
  description: ''
 servers:
  - url: localhost
    description: ''
paths:
  /status:
    get:
      summary: status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: responce encrypted payload in base64
                example: 
                minLength: 398
                maxLength: 398
                pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
              examples: {}
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      operationId: get-status
      description: " "
            requestBody:
        content:
          application/json:
          schema:
              type: object
              properties:
                '':
                  $ref: ''
      parameters:
        - schema:
            type: string
            maxLength: 398
            minLength: 398
            pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
          in: query
          name: key
          description: ''
          required: true
        - schema:
            type: string
            minLength: 398
            pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
            maxLength: 398
          in: query
          name: sig
          description: ''
          required: true
      security: []
      tags:
        - Getting Status Information
  /command:
    post:
      summary: command
      operationId: post-command
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
          headers: {}
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: 'encrypted command payload, controller public key and signature'
              properties:
                payload:
                  type: string
                  maxLength: 1024
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
                  description: Command payload encrypted with iWine public key
                key:
                  type: string
                  description: Controller public key
                  example: ""
                  minLength: 398
                  maxLength: 398
                  pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
                sig:
                  type: string
                  description: Controller public key signed with private key
                  example: ""
                  minLength: 398
                  maxLength: 398
                  pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
              required:
                - payload
                - key
                - sig
        description: ''
      description: ""
      tags:
        - 'Operations and Notifications Management '
  /pair:
    post:
      summary: pair
      operationId: post-pair
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                description: iWine public key JSON
                additionalProperties: false
                properties:
                  pub:
                    type: string
                    example: 
                    minLength: 398
                    maxLength: 398
                    pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
                    description: 'iWine public key, base64'
                required:
                  - pub
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: string
            text/html:
              schema:
                type: string
          headers: {}
        '400':
          description: |-
            Bad Request
            Switch iWine to pairing mode first
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Controller public key JSON
              additionalProperties: false
              properties:
                pub:
                  type: string
                  example: 
                  minLength: 398
                  maxLength: 398
                  pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
                  description: 'Controller public key, base64'
              required:
                - pub
      security: []
      description: |-
        Since iWine must work on a LAN over HTTP with no guarantee of access to the Internet and CA infrastructure, it relies on a custom RSA key exchange for mutual authorization and authentication of controllers and iWine devices.

        To authorize a controller with iWine device press **PAIR** button on iWine control panel, "PAIRING MODE" should appear on its LED display. When in pairing mode, iWine accepts valid authorization request from a controller and display its network name (if available) or IP address on the LED display with a scrolling message: "LONG PRESS **PAIR** TO CONFIRM, SHORT PRESS TO CANCEL". Users can confirm or cancel authorization accordingly.

        To initiate a pairing request controller must generate a 2048-bit RSA key pair and send a POST HTTP request to iWine `/pair` endpoint with its public key in its body. If this request was accepted by iWine and confirmed by its user in a timely manner, iWine generates a keypair and return its public key and signature in the POST response body with HTTP code 201. It accepts only the first valid pairing request and ignores all subsequent requests to the `/pair` endpoint until this pairing session ends and another one starts. If there were no valid pairing requests, the pairing mode would time out in 1 minute. Users can abort pairing mode sessions by short-pressing **PAIR** again at any time.

        The proposed security scheme does not protect from MITM and replay attacks, as we consider their mitigation outside of the scope of this task. Replay attacks, in particular, could be addressed by introducing nonces into payloads.
      tags:
        - Authorization and Authentication
    parameters: []
components:
  schemas: {}
  securitySchemes: {}
